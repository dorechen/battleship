{"version":3,"sources":["features/ship/shipsSlice.js","util.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["shipsSlice","createSlice","name","initialState","board","ships","shipsLeft","reducers","isHit","state","action","payload","y","x","find","ship","Set","filter","s","map","key","length","isMiss","createGame","Array","from","fill","actions","selectShips","selectShipsLeft","selectBoard","generateRandShipPoints","boardSize","size","startPoint","Math","floor","random","isHorizontal","placement","i","push","hasCollision","shipsArray","newShip","j","generateGameMessage","lastMove","target","hit","shipIsSunk","App","useSelector","dispatch","useDispatch","useState","setLastMove","yLookup","className","onClick","shipArray","forEach","shipPoints","startgame","item","index","yIndex","xIndex","point","shoot","configureStore","reducer","shipsReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a02b1325.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const shipsSlice = createSlice({\n  name: \"ships\",\n  initialState: {\n    board: null,\n    ships: [],\n    shipsLeft: 0,\n  },\n  reducers: {\n    isHit: (state, action) => {\n      const { y, x } = action.payload;\n      const shipToUpdate = state.ships.find(\n        (ship) => y === ship.y && x === ship.x\n      );\n      shipToUpdate.isHit = true;\n      state.board[y][x] = \"x\";\n      state.shipsLeft = [\n        ...new Set(state.ships.filter((s) => !s.isHit).map((s) => s.key)),\n      ].length;\n    },\n    isMiss: (state, action) => {\n      const { y, x } = action.payload;\n      state.board[y][x] = \"o\";\n    },\n    createGame: (state, action) => {\n      // TODO: be able to change board size\n      state.board = Array.from(Array(8), () => new Array(8).fill(\" \"));\n      state.ships = action.payload;\n      state.shipsLeft = [...new Set(action.payload.map((s) => s.key))].length;\n    },\n  },\n});\n\nexport const { isHit, isMiss, createGame } = shipsSlice.actions;\n\nexport const selectShips = (state) => state.ships.ships;\nexport const selectShipsLeft = (state) => state.ships.shipsLeft;\nexport const selectBoard = (state) => state.ships.board;\n\nexport default shipsSlice.reducer;\n","export const generateRandShipPoints = (boardSize, { size, key }) => {\n  const startPoint = [\n    Math.floor(Math.random() * (boardSize.y - size)),\n    Math.floor(Math.random() * (boardSize.x - size)),\n  ];\n  const isHorizontal = Math.random() < 0.5;\n  const placement = [];\n  for (let i = 0; i < size; i++) {\n    if (isHorizontal) {\n      placement.push({\n        y: startPoint[0],\n        x: startPoint[1] + i,\n        key,\n        isHit: false,\n      });\n    } else {\n      placement.push({\n        y: startPoint[0] + i,\n        x: startPoint[1],\n        key,\n        isHit: false,\n      });\n    }\n  }\n  return placement;\n};\n\nexport const hasCollision = (shipsArray, newShip) => {\n  if (shipsArray.length === 0) return false;\n  for (let i = 0; i < shipsArray.length; i++)\n    for (let j = 0; j < newShip.length; j++)\n      if (shipsArray[i].x === newShip[j].x && shipsArray[i].y === newShip[j].y)\n        return true;\n  return false;\n};\n","import React, { useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {\n  isHit,\n  isMiss,\n  createGame,\n  selectShips,\n  selectShipsLeft,\n  selectBoard,\n} from \"./features/ship/shipsSlice\";\nimport \"./App.css\";\nimport { generateRandShipPoints, hasCollision } from \"./util\";\n\nconst startgame = (boardSize = { y: 8, x: 8 }) => {\n  const destroyer = { size: 2, key: \"D\" };\n  const cruiser = { size: 3, key: \"C\" };\n  const battleship = { size: 4, key: \"B\" };\n  const allShips = [battleship, cruiser, destroyer];\n\n  const shipArray = [];\n  const shipPlacement = (allShips) =>\n    allShips.forEach((ship) => {\n      let shipPoints = generateRandShipPoints(boardSize, ship);\n      while (hasCollision(shipArray, shipPoints))\n        shipPoints = generateRandShipPoints(boardSize, ship);\n\n      shipArray.push(...shipPoints);\n    });\n\n  shipPlacement(allShips);\n  return shipArray;\n};\n\nconst shoot = (target, ships, dispatch) => {\n  const { y, x } = target;\n  const hit = ships.find((point) => point.y === y && point.x === x);\n  let shipIsSunk = false;\n  if (hit) {\n    const ship = ships\n      .filter(({ key }) => key === hit.key)\n      .filter(({ y, x, isHit }) => !isHit && !(hit.y === y && hit.x === x));\n    shipIsSunk = ship.length === 0;\n    dispatch(isHit(hit));\n  } else dispatch(isMiss(target));\n  return { target, hit, shipIsSunk };\n};\n\nconst generateGameMessage = (lastMove, shipsLeft) => {\n  const { target, hit, shipIsSunk } = lastMove;\n  const shipName = [\n    { key: \"D\", name: \"destroyer\" },\n    { key: \"C\", name: \"cruiser\" },\n    { key: \"B\", name: \"battleship\" },\n  ];\n\n  return (\n    <>\n      <div>\n        <b>{`Ships left: `}</b>\n        {shipsLeft}\n      </div>\n      <div>\n        <b>{`Last move: `}</b>\n        {lastMove ? `${target.target}` : \"\"}\n      </div>\n      <div>\n        {lastMove\n          ? `${hit ? \"Hit!\" : \"Miss.\"}${\n              shipIsSunk\n                ? ` You have sunk a ${\n                    shipName.find((s) => s.key === hit.key).name\n                  }!`\n                : \"\"\n            }`\n          : \"\"}\n      </div>\n      {!shipsLeft && (\n        <div>You've won! Click \"Start New Game\" to play again.</div>\n      )}\n    </>\n  );\n};\n\nfunction App() {\n  const ships = useSelector(selectShips);\n  const shipsLeft = useSelector(selectShipsLeft);\n  const board = useSelector(selectBoard);\n  const dispatch = useDispatch();\n  const [lastMove, setLastMove] = useState(\"\");\n  const yLookup = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\"];\n\n  return (\n    <div className=\"App\">\n      <button\n        onClick={() => {\n          dispatch(createGame(startgame()));\n          setLastMove(\"\");\n        }}\n      >\n        Start New Game\n      </button>\n      <div className=\"game-body\">\n        {ships.length > 0 ? (\n          <>\n            <div>{generateGameMessage(lastMove, shipsLeft)}</div>\n\n            <table>\n              <thead>\n                <tr key=\"dl\">\n                  {[\"-\", 1, 2, 3, 4, 5, 6, 7, 8].map((item, index) => (\n                    <th key={`x-${index}`}>{item}</th>\n                  ))}\n                </tr>\n              </thead>{\" \"}\n              <tbody>\n                {board.map((item, yIndex) => (\n                  <tr key={`y-${yIndex}`}>\n                    <td key={`row-${yLookup[yIndex]}`}>{yLookup[yIndex]}</td>\n                    {item.map((i, xIndex) => (\n                      <td\n                        key={`${yIndex},${xIndex}`}\n                        onClick={() => {\n                          if (shipsLeft)\n                            setLastMove(\n                              shoot(\n                                {\n                                  target: `${yLookup[yIndex]}${xIndex + 1}`,\n                                  y: yIndex,\n                                  x: xIndex,\n                                },\n                                ships,\n                                dispatch\n                              )\n                            );\n                        }}\n                      >\n                        {i}\n                      </td>\n                    ))}\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </>\n        ) : (\n          <></>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport shipsReducer from \"../features/ship/shipsSlice\";\n\nexport default configureStore({\n  reducer: {\n    ships: shipsReducer,\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport store from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}